/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TreasureFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "KEY_PRICE"
      | "REWARD0_AMOUNT"
      | "REWARD1_AMOUNT"
      | "REWARD2_AMOUNT"
      | "buyKey"
      | "buyKeys"
      | "claimRewardCallback"
      | "claimRewardRequest"
      | "fundPool"
      | "getBoxPriceWei"
      | "getMyKeyBalance"
      | "getMyLastRewardType"
      | "getPoolBalance"
      | "getTotalBoxesOpened"
      | "getTotalKeysSold"
      | "openBox"
      | "owner"
      | "protocolId"
      | "setBoxPriceWei"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BoxOpened"
      | "DecryptionFulfilled"
      | "RewardClaimRequested"
      | "RewardPaid"
  ): EventFragment;

  encodeFunctionData(functionFragment: "KEY_PRICE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REWARD0_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD1_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD2_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyKey", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyKeys",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardCallback",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardRequest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fundPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBoxPriceWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyKeyBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyLastRewardType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBoxesOpened",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalKeysSold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "openBox", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBoxPriceWei",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "KEY_PRICE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REWARD0_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD1_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD2_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBoxPriceWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyKeyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyLastRewardType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBoxesOpened",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalKeysSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBoxPriceWei",
    data: BytesLike
  ): Result;
}

export namespace BoxOpenedEvent {
  export type InputTuple = [user: AddressLike, resultHandle: BytesLike];
  export type OutputTuple = [user: string, resultHandle: string];
  export interface OutputObject {
    user: string;
    resultHandle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimRequestedEvent {
  export type InputTuple = [user: AddressLike, requestId: BigNumberish];
  export type OutputTuple = [user: string, requestId: bigint];
  export interface OutputObject {
    user: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPaidEvent {
  export type InputTuple = [
    user: AddressLike,
    rewardType: BigNumberish,
    amountWei: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    rewardType: bigint,
    amountWei: bigint
  ];
  export interface OutputObject {
    user: string;
    rewardType: bigint;
    amountWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TreasureFHE extends BaseContract {
  connect(runner?: ContractRunner | null): TreasureFHE;
  waitForDeployment(): Promise<this>;

  interface: TreasureFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  KEY_PRICE: TypedContractMethod<[], [bigint], "view">;

  REWARD0_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  REWARD1_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  REWARD2_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  buyKey: TypedContractMethod<[], [void], "payable">;

  buyKeys: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [void],
    "nonpayable"
  >;

  claimRewardCallback: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  claimRewardRequest: TypedContractMethod<[], [bigint], "nonpayable">;

  fundPool: TypedContractMethod<[], [void], "payable">;

  getBoxPriceWei: TypedContractMethod<[], [string], "view">;

  getMyKeyBalance: TypedContractMethod<[], [string], "view">;

  getMyLastRewardType: TypedContractMethod<[], [string], "view">;

  getPoolBalance: TypedContractMethod<[], [bigint], "view">;

  getTotalBoxesOpened: TypedContractMethod<[], [string], "view">;

  getTotalKeysSold: TypedContractMethod<[], [string], "view">;

  openBox: TypedContractMethod<[], [string], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  setBoxPriceWei: TypedContractMethod<
    [encPrice: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "KEY_PRICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD0_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD1_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD2_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyKey"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "buyKeys"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewardCallback"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewardRequest"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "fundPool"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getBoxPriceWei"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMyKeyBalance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMyLastRewardType"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPoolBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalBoxesOpened"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalKeysSold"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "openBox"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBoxPriceWei"
  ): TypedContractMethod<
    [encPrice: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BoxOpened"
  ): TypedContractEvent<
    BoxOpenedEvent.InputTuple,
    BoxOpenedEvent.OutputTuple,
    BoxOpenedEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimRequested"
  ): TypedContractEvent<
    RewardClaimRequestedEvent.InputTuple,
    RewardClaimRequestedEvent.OutputTuple,
    RewardClaimRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RewardPaid"
  ): TypedContractEvent<
    RewardPaidEvent.InputTuple,
    RewardPaidEvent.OutputTuple,
    RewardPaidEvent.OutputObject
  >;

  filters: {
    "BoxOpened(address,bytes32)": TypedContractEvent<
      BoxOpenedEvent.InputTuple,
      BoxOpenedEvent.OutputTuple,
      BoxOpenedEvent.OutputObject
    >;
    BoxOpened: TypedContractEvent<
      BoxOpenedEvent.InputTuple,
      BoxOpenedEvent.OutputTuple,
      BoxOpenedEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "RewardClaimRequested(address,uint256)": TypedContractEvent<
      RewardClaimRequestedEvent.InputTuple,
      RewardClaimRequestedEvent.OutputTuple,
      RewardClaimRequestedEvent.OutputObject
    >;
    RewardClaimRequested: TypedContractEvent<
      RewardClaimRequestedEvent.InputTuple,
      RewardClaimRequestedEvent.OutputTuple,
      RewardClaimRequestedEvent.OutputObject
    >;

    "RewardPaid(address,uint8,uint256)": TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
    RewardPaid: TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
  };
}
